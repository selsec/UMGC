Ok, so here goes. Not exactly sure if this is running along the same lines, because it seems the discussion question is asking about STL, which is the Standard Library from C++, which I don't really know anything about. However, I also read that it is the equivalent of Java Collections, which I believe I have my head wrapped around now. So, I wrote three programs, 2 which demonstrates Java Collections and both generic and non-generic classes, and a third which demonstrates non-generic, non-collection. All 3 programs are doing the same thing. 

First, for the Generic/Collections program. In this program, it creates a Generic String List, and then attempts to store two strings and then an integer into the list, then print all the elements of the list to stdout. It gives a compile time error as expected because you cannot store an integer in a list of strings.

Instead of just using an array, it uses a list. This provides a number of benefits. First, you do not need to declare the size right away. The list will grow and shrink as elements are added or removed. It also provides a way to search through the elements using an iterator. All said and done, using a list provides a lot of benefits that its non-collection brother the array cannot do.

The next example is a non-generic list of the same program. As expected, this program also gives a compile time error because it is attempting to add an integer to a list of strings. However, if the integer was added first, the list would become a list of integers and attempting to add the two strings after would also give a compile time error. This program also uses a collection, the list, instead of an array.

The final example is a non-generic, non-collection program. It uses an array to store the information, and because it is an array,  the size must be declared prior to use, and it is then static. It cannot grow or shrink without creating a new array. That is a massive benefit of lists over arrays. 

So honestly, I don't understand why generics would be needed over non-generics, when both of them are going to give compile time errors if the programmer tries to use different types. The only thing I can think of is clarity. Since the generics program declares in the beginning that the list is of type string, it is absolutely clear to anyone looking at the code that the type is supposed to be strings. 

Please feel free to chime in and give me some education on the subject, because I'm having a hard time wrapping my head around the content this week.

-Steve

